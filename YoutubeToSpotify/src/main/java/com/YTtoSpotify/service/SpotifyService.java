package com.YTtoSpotify.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;


@Service
public class SpotifyService {
	@Autowired
	private OAuth2AuthorizedClientService clientService;

	public String createPlayList(String userId ,String token, String playlistName) throws JsonMappingException, JsonProcessingException {
		String url = "https://api.spotify.com/v1/users/"+ userId + "/playlists";
		HttpHeaders headers = new HttpHeaders();
		headers.setBearerAuth(token);
		headers.setContentType(MediaType.APPLICATION_JSON);
		String body = "{ \"name\": \""+playlistName+"\", \"description\": \"Generated by app\", \"public\":false }";
		HttpEntity<String> entity = new HttpEntity<>(body,headers);
		
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<String> response = restTemplate.postForEntity(url, entity, String.class);
		
		ObjectMapper mapper = new ObjectMapper();
		JsonNode root = mapper.readTree(response.getBody());
		return root.path("id").asText();
	}
	
	public List<String> searchAndCollectUris(List<String> trackNames, String accessToken) {
	    ExecutorService executor = Executors.newFixedThreadPool(10);
	    List<CompletableFuture<String>> futures = new ArrayList<>();
	    for (String trackName : trackNames) {
	    	futures.add(CompletableFuture.supplyAsync(() -> {
	    	    try {
	    	    	String filteredTrackName = cleanYouTubeTitle(trackName);
	    	        return searchTrack(filteredTrackName, accessToken);
	    	    } catch (Exception e) {
	    	        System.out.println("Search failed for: " + trackName);
	    	        return null;
	    	    }
	    	}, executor));
	    }
	    List<String> uris = futures.stream()
	            .map(CompletableFuture::join)
	            .filter(Objects::nonNull)
	            .collect(Collectors.toList());
	    executor.shutdown();

	    return uris; // ✅ already in "spotify:track:<id>" format
	}


	public String searchTrack(String trackName, String accessToken) {
		// TODO Auto-generated method stub
		String url = UriComponentsBuilder.fromHttpUrl("https://api.spotify.com/v1/search")
				.queryParam("q", trackName)
				.queryParam("type","track")
				.queryParam("limit", 1)
				.toUriString();
		HttpHeaders headers = new HttpHeaders();
		headers.setBearerAuth(accessToken);
		
		HttpEntity<String> entity = new HttpEntity<>(headers);
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<Map> response = restTemplate.exchange(url, HttpMethod.GET,entity,Map.class);
		
		Map<String, Object> tracks = (Map<String,Object>) response.getBody().get("tracks");
		List<Map<String,Object>> items = (List<Map<String,Object>>) tracks.get("items");
		
		if(items.isEmpty())return null;
		return(String) items.get(0).get("uri");
	}
	public void addTracksToPlaylist(String playlistId, List<String> trackUris, String accessToken) {
	    RestTemplate restTemplate = new RestTemplate();
	    HttpHeaders headers = new HttpHeaders();
	    headers.setContentType(MediaType.APPLICATION_JSON);
	    headers.setBearerAuth(accessToken);

	    Map<String, Object> body = new HashMap<>();
	    body.put("uris", trackUris); // ✅ already full URIs

	    HttpEntity<Map<String, Object>> request = new HttpEntity<>(body, headers);

	    String url = "https://api.spotify.com/v1/playlists/" + playlistId + "/tracks";
	    restTemplate.postForEntity(url, request, String.class);
	}

	public void processAndAddTracks(String playlistId, List<String> trackNames, String accessToken) {
	    List<String> uris = searchAndCollectUris(trackNames, accessToken);

	    if (uris != null && !uris.isEmpty()) {
	        addTracksToPlaylist(playlistId, uris, accessToken);
	    } else {
	        System.out.println("No valid tracks found to add.");
	    }
	}


	public String getAccessToken(OAuth2AuthenticationToken authentication) {
		// TODO Auto-generated method stub
		OAuth2AuthorizedClient client = clientService.loadAuthorizedClient(authentication.getAuthorizedClientRegistrationId(), authentication.getName());
		String accessToken = client.getAccessToken().getTokenValue();
		return accessToken;
	}

	public String getUserId(String accessToken) {
	    String url = "https://api.spotify.com/v1/me";

	    // Create headers
	    HttpHeaders headers = new HttpHeaders();
	    headers.set("Authorization", "Bearer " + accessToken);

	    // Create request entity
	    HttpEntity<String> entity = new HttpEntity<>(headers);

	    // Make the request
	    RestTemplate restTemplate = new RestTemplate();
	    ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);

	    if (response.getStatusCode() == HttpStatus.OK) {
	        // Parse JSON response
	        JSONObject json = new JSONObject(response.getBody());

	        return json.getString("id");  // The Spotify user ID
	    } else {
	        throw new RuntimeException("Failed to get user info. Status code: " + response.getStatusCode());
	    }
	}
	
	public String cleanYouTubeTitle(String title) {
	    if (title == null || title.isEmpty()) return title;

	    // 1. Remove bracketed content: [..] or (..)
	    String cleaned = title.replaceAll("\\[.*?\\]|\\(.*?\\)", "");

	    // 2. Remove common YouTube tags
	    cleaned = cleaned.replaceAll("(?i)4K Video Song|Official Video|Lyrics", "");

	    // 3. Remove everything after a pipe '|' (optional)
//	    cleaned = cleaned.split("\\|")[0];

	    // 4. Remove extra spaces
	    cleaned = cleaned.trim().replaceAll("\\s{2,}", " ");

	    // 5. Optional: remove non-ASCII characters (regional scripts)
	    cleaned = cleaned.replaceAll("[^\\x00-\\x7F]", "");

	    return cleaned;
	}

}
